<?php

namespace App\Http\Controllers;

use App\Contracts\DriverExceptionContract;
use App\Http\Resources\MiteIndexResource;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

/**
 * Когда написание кода закончено, ОБЯЗАТЕЛЬНО нужно нажимать Ctrl+Alt+L
 * или, для тех у кого память как у рыбки - поставьте себе phpcsfixer или какое-нибудь подобное дерьмо
 * и прекоммит-хук, что бы оно форматировало код перед коммитом за Вас
 *
 * P.S. Не нужно изобретать собственные стандарты форматирования и написания кода,
 * основная задача бекенд-программистов - это писать код соблюдая уже придуманные за них стандарты,
 * [в том числе стандарты форматирования кода] а не изобретать свои собственные
 *
 * P.S. Я понимаю, что для многих это тоже будет сложным для понимания, по этому, если Вы столкнулись с такой проблемой,
 * что бы сберечь собственную психику - просто примите это как данность, неизбежность и факт,
 * мир уже никогда не будет прежним...
 *
 * Class MiteController
 * @package App\Http\Controllers
 */
class MiteController extends Controller
{
    /**
     * Типом возвращаемых данных можно указывать либо просто JsonResource, либо конкретный тип.
     * Почему всегда не указывать конкретный/правильный тип данных в данном случае?
     * По тому, что это физически не всегда получается делать. По этому, какой конкретно тип возвращать,
     * базовый (JsonResource) или конечный (MiteIndexResource) оставляю на Ваше усмотрение
     *
     * @param Request $request
     * @return JsonResource
     */
    public function index(Request $request): JsonResource
    {
        return new MiteIndexResource([
            'hello' => 'world',
        ]);
    }

    /**
     * Пример метода, который генерирует необрабатываемую ошибку
     *
     * @param DriverExceptionContract $exception
     * @throws DriverExceptionContract
     */
    public function error(DriverExceptionContract $exception)
    {
        /**
         * Для особо страждущих - можно либо сделать универсальный метод-сеттер,
         * либо расширить конструктор
         * либо воспользоваться магическими методами, либо "...", ещё там всякие итераторы есть и еже с ними...
         * Я привожу в пример самый примитивный вариант
         */
        $e = new DriverExceptionContract("Hello world", 999);

        // Варианты заполнения класса "нужными" дополнительными данными
        $e->setClass(__CLASS__); // Вариант 1
        $e->additionalData = 'Какие-то дополнительные данные ошибки'; //Вариант 2

        // Так же можно отказаться от публичных свойств и вызывать сеттеры цепочкой, минуя промежуточную переменную

        throw $e;
    }
}
